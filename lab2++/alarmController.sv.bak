module alarmController();
	input button;
	output reg [1:0] outVal;

	reg [1:0] button_sr;
	reg [1:0] currentState;
	reg [1:0] nextState; // the next state to be assigned
	reg [1:0] outVal_d;  // the next output value to be assigned

	always @(posedge clk) begin
	/* shift the shift register left by 1 and
		store the current button value */
		button_sr <= { button_sr[0], button };

	/* state transition */
		currentState <= nextState;

	/* output assignment */
		outVal <= outVal_d;
	end

	localparam STATE1 = 2'b00;
	localparam STATE2 = 2'b01;
	/* other states go here */

	always_comb begin
		case (currentState)
			STATE1: begin
			/* remember that this won't be "assigned"
				until the sequential block executes (on
				the clock edge! */

				/* if the button has a positive edge (i.e.
					it was just pressed, transition states */
				if (button_sr == 2'b01) begin
					nextState = STATE2;
					outVal_d = 2'b01;
				end else begin
					nextState = STATE1;
					outVal_d = 2'b11;
				end
			end
			/* other states go here */
		endcase
end

